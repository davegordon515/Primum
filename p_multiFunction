<script type="text/javascript">
/*TRIGGER MULTIFUNCTION: RUN MULTIFUNCTION ON LOAD, ON FRMAFTERADDROW,
ON FRMAFTERREMOVEROW, AND ON KEYUP FOR NUMERATOR, DENOMINATOR, AND ANNOTATION*/
document.addEventListener("DOMContentLoaded", multiFunction );
jQuery(document).on('frmAfterAddRow', multiFunction );
jQuery(document).on('frmAfterRemoveRow', multiFunction );
jQuery( '#frm_field_1374_container' ).on( 'keyup', '.frm_field_1379_container input, .frm_field_1380_container input, .frm_field_1439_container input', multiFunction );
jQuery( '#field_y8rau, #field_o0nqn' ).on( 'change', multiFunction );

function multiFunction() {
/*DECLARE GLOBAL VARIABLES*/
var countFields = document.querySelectorAll( '.frm_field_1533_container input');
var num = document.querySelectorAll( '.frm_field_1379_container input');
var denom = document.querySelectorAll( '.frm_field_1380_container input');
var p = document.querySelectorAll( '.frm_field_1381_container input');
var annotation = document.querySelectorAll( '.frm_field_1439_container input');
var median = document.getElementById( 'field_naa1p' );
var mean = document.getElementById( 'field_ojg23' );
var threeSdBelow = document.querySelectorAll( '.frm_field_1864_container input');
var threeSdAbove = document.querySelectorAll( '.frm_field_1865_container input');
var twoSdBelow = document.querySelectorAll( '.frm_field_1866_container input');
var twoSdAbove = document.querySelectorAll( '.frm_field_1867_container input');
var oneSdBelow = document.querySelectorAll( '.frm_field_1868_container input');
var oneSdAbove = document.querySelectorAll( '.frm_field_1869_container input');
var lowerLimitRuns = document.querySelectorAll( '.frm_field_1515_container input');
var upperLimitRuns = document.querySelectorAll( '.frm_field_1525_container input');
var runs = document.querySelectorAll( '.frm_field_1678_container input');
var warnFiveDecrease = document.querySelectorAll( '.frm_field_1658_container');
var warnFiveIncrease = document.querySelectorAll( '.frm_field_1659_container');
var warnSixBelowMedian = document.querySelectorAll( '.frm_field_1657_container');
var warnSixAboveMedian = document.querySelectorAll( '.frm_field_1656_container');
var warnMixtureRun = document.querySelectorAll( '.frm_field_1571_container');
var warnClusteringRun = document.querySelectorAll( '.frm_field_1570_container');
var warnSixDecrease = document.querySelectorAll( '.frm_field_1662_container');
var warnSixIncrease = document.querySelectorAll( '.frm_field_1663_container');
var warnTwoThirdsBelowTwoSD = document.querySelectorAll( '.frm_field_1456_container');
var warnTwoThirdsAboveTwoSD = document.querySelectorAll( '.frm_field_1469_container');
var warnFourFifthsBelowOneSD = document.querySelectorAll( '.frm_field_1468_container');
var warnFourFifthsAboveOneSD = document.querySelectorAll( '.frm_field_1467_container');
var warnEightBelowMean = document.querySelectorAll( '.frm_field_1660_container');
var warnEightAboveMean = document.querySelectorAll( '.frm_field_1661_container');
var warnMixture = document.querySelectorAll( '.frm_field_1687_container');
var warnStratification = document.querySelectorAll( '.frm_field_1688_container');
var warnOvercontrol = document.querySelectorAll( '.frm_field_1689_container');
var warnOutlierBelow = document.querySelectorAll( '.frm_field_1452_container' );
var warnOutlierAbove = document.querySelectorAll( '.frm_field_1453_container' );
var unaddressedOutlierTotalOutside = document.getElementById( 'field_jgx3f' );
var unaddressedPatternTotalOutside = document.getElementById( 'field_ifqp4' );
var target = document.getElementById( 'field_mhq1l' );
var medianInside = document.querySelectorAll( '.frm_field_1729_container input');
var medianInsideHidden = document.querySelectorAll( '.frm_field_1734_container input');
var meanInside = document.querySelectorAll( '.frm_field_1728_container input');
var targetInside = document.querySelectorAll( '.frm_field_1730_container input');
var periodStart = document.getElementById( 'field_y8rau' );
var intervalSize = document.getElementById( 'field_o0nqn' );
var intervalStart = document.querySelectorAll( '.frm_field_1435_container input');
var intervalStop = document.querySelectorAll( '.frm_field_1803_container input');

/*CALCULATE P, COUNT NUMBER OF COMPLETE OBSERVATIONS, SET UP ROW COUNTER*/
var emptyObsSumAdmin = 0;
  for ( var i = 0, len=p.length; i<len; i++ ) {
    if (num[i].value == '' || denom[i].value == '') {
      p[i].value = '';
    } else {
      p[i].value = parseFloat((num[i].value / denom[i].value).toFixed(5));
    };
    var emptyObsAdmin = (function() {
      if (num[i].value == '' || denom[i].value == '') {
        return 1;
      } else {
        return 0;
      }
    }());
    emptyObsSumAdmin = emptyObsSumAdmin + emptyObsAdmin;
    var nodeLengthAdmin = p.length - emptyObsSumAdmin;
    countFields[i].value = i+1;

/*AUTOMATE DATE CALCULATIONS*/
    var intervalSizeAdmin = parseFloat(intervalSize.value);
    switch (i) {
      case 0:
        if (periodStart.value == '') {
          intervalStart[i].value = '';
        } else {
          var intervalStart0Admin = new Date(periodStart.value);
          intervalStart[i].value = intervalStart0Admin;
        };
        var intervalStopAdmin = (function() {
          var intervalStartAdmin = new Date(periodStart.value);
          var intervalEndAdmin = new Date(intervalStartAdmin);
          intervalEndAdmin.setDate(intervalEndAdmin.getDate() + intervalSizeAdmin - (1/86400));
          var ddAdmin = intervalEndAdmin.getDate();
          var mmAdmin = intervalEndAdmin.getMonth() + 1;
          var yyAdmin = intervalEndAdmin.getFullYear();
          var hhAdmin = intervalEndAdmin.getHours();
          var hhTextAdmin = (function() {
            if (hhAdmin > 10) {
              return hhAdmin;
            } else {
              return '0' + hhAdmin;
            }
          }());
          var minAdmin = intervalEndAdmin.getMinutes();
          var minTextAdmin = (function() {
            if (minAdmin > 10) {
              return minAdmin;
            } else {
              return '0' + minAdmin;
            }
          }());
          var ssAdmin = intervalEndAdmin.getSeconds();
          var ssTextAdmin = (function() {
            if (ssAdmin > 10) {
              return ssAdmin;
            } else {
              return '0' + ssAdmin;
            }
          }());
          var formattedDateAdmin = mmAdmin + '/' + ddAdmin + '/' + yyAdmin + ' ' + hhTextAdmin + ':' + minTextAdmin + ':' + ssTextAdmin;
          var intervalEndFinalAdmin = new Date(formattedDateAdmin);
          return intervalEndFinalAdmin;
        }());
        if (periodStart.value == '' || intervalSize.value == '') {
          intervalStop[i].value = '';
        } else {
          intervalStop[i].value = intervalStopAdmin;
        };
        break;
      default:
        var intervalStart1Admin = (function() {
          var intervalStopPrevAdmin = new Date(intervalStop[i-1].value);
          var intervalStart1NewAdmin = new Date(intervalStopPrevAdmin);
          intervalStart1NewAdmin.setDate(intervalStart1NewAdmin.getDate() + 1);
          var dd1aAdmin = intervalStart1NewAdmin.getDate();
          var mm1aAdmin = intervalStart1NewAdmin.getMonth() + 1;
          var yy1aAdmin = intervalStart1NewAdmin.getFullYear();
          var formattedDateStart1Admin = mm1aAdmin + '/' + dd1aAdmin + '/' + yy1aAdmin;
          var intervalStart1FinalAdmin = new Date(formattedDateStart1Admin);
          return intervalStart1FinalAdmin;
        }());
        intervalStart[i].value = intervalStart1Admin;
        var intervalStop1Admin = (function() {
          var intervalStart1bAdmin = new Date(intervalStart[i].value);
          var intervalEnd1Admin = new Date(intervalStart1bAdmin);
          intervalEnd1Admin.setDate(intervalEnd1Admin.getDate() + intervalSizeAdmin - (1/86400));
          var dd1bAdmin = intervalEnd1Admin.getDate();
          var mm1bAdmin = intervalEnd1Admin.getMonth() + 1;
          var yy1bAdmin = intervalEnd1Admin.getFullYear();
          var hh1bAdmin = intervalEnd1Admin.getHours();
          var hh1bTextAdmin = (function() {
            if (hh1bAdmin > 10) {
              return hh1bAdmin;
            } else {
              return '0' + hh1bAdmin;
            }
          }());
          var min1bAdmin = intervalEnd1Admin.getMinutes();
          var min1bTextAdmin = (function() {
            if (min1bAdmin > 10) {
              return min1bAdmin;
            } else {
              return '0' + min1bAdmin;
            }
          }());
          var ss1bAdmin = intervalEnd1Admin.getSeconds();
          var ss1bTextAdmin = (function(){
            if (ss1bAdmin >10) {
              return ss1bAdmin;
            } else {
              return '0' + ss1bAdmin;
            }
          }());
          var formattedDateStop1Admin = mm1bAdmin + '/' + dd1bAdmin + '/' + yy1bAdmin + ' ' + hh1bTextAdmin + ':' + min1bTextAdmin + ':' + ss1bTextAdmin;
          var intervalEnd1FinalAdmin = new Date(formattedDateStop1Admin);
          return intervalEnd1FinalAdmin;
        }());
        intervalStop[i].value = intervalStop1Admin;
    }
  };

/*INITIALIZE PARAMETERS*/
  /*CALCULATE MEDIAN*/

var pArray = Array.prototype.slice.call( p );
var pArraySort = pArray.sort( function(a, b) {return a.value - b.value;} );
var middle = Math.floor(pArraySort.length / 2);
var medianAdmin = (function() {
  if (pArraySort.length % 2) {
    return parseFloat(pArraySort[middle].value);
  } else {
    return parseFloat((parseFloat(pArraySort[middle-1].value) + parseFloat(pArraySort[middle].value)) / 2);
  };
}());
median.value = parseFloat(medianAdmin.toFixed(5));
var medianJudge = median.value - target.value;
if (nodeLengthAdmin > 9 && medianJudge > 0) {
  median.style.backgroundColor = 'LightGreen';
} else if (nodeLengthAdmin > 9 && medianJudge < 0) {
  median.style.backgroundColor = 'LightPink';
} else {
  median.style.backgroundColor = 'none';
};

  /*CALCULATE MEAN FOR COMPLETE OBSERVATIONS ONLY*/
var sumPAdmin = 0;
  for ( var i=0, len=p.length; i<len; i++ ) {
    var pAdmin = (function() {
      if (num[i].value == '' || denom[i].value == '') {
        return 0;
      } else {
        return parseFloat(num[i].value / denom[i].value);
      }
    }());
    sumPAdmin = sumPAdmin + pAdmin;
  }
  mean.value = parseFloat((sumPAdmin / nodeLengthAdmin).toFixed(5));
  var meanJudge = mean.value - target.value;
  if (nodeLengthAdmin > 19 && meanJudge > 0) {
    mean.style.backgroundColor = 'LightGreen';
  } else if (nodeLengthAdmin > 19 && meanJudge < 0) {
    mean.style.backgroundColor = 'LightPink';
  } else {
    mean.style.backgroundColor = 'none';
  };

  /*INITIALIZE GLOBAL ADMINISTRATIVE VARIABLES*/
  var sumCrossMedianAdmin = 0;
  var unaddressedOutlierTotalAdmin = 0;
  var unaddressedPatternTotalAdmin = 0;

  /*CALCULATE 1, 2, AND 3 SD BELOW AND ABOVE MEAN*/
  for ( var i=0, len=p.length; i<len; i++ ) {
    var threeSdBelowAdmin = ((parseFloat(mean.value) - parseFloat(3 * (Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))) +
    (Math.abs(parseFloat(mean.value) - parseFloat(3 * (Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))))) / 2;
    var threeSdAboveAdmin = 1 - (((1 - (parseFloat(mean.value) + parseFloat(3 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))))) +
    (Math.abs(1 - (parseFloat(mean.value) + parseFloat(3 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))))))) / 2);
    var twoSdBelowAdmin = ((parseFloat(mean.value) - parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value)))))) +
    (Math.abs(parseFloat(mean.value) - parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value)))))))) / 2;
    var twoSdAboveAdmin = 1 - ((((1 - (parseFloat(mean.value) + parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value)))))))) +
    (Math.abs(1 - (parseFloat(mean.value) + parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))))))) / 2);
    var oneSdBelowAdmin = ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))) +
    (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))))) / 2;
    var oneSdAboveAdmin = 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value))))))) +
    (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i].value)))))))) / 2);
    if (num[i].value == '' || denom[i].value == '') {
      threeSdBelow[i].value = '';
      threeSdAbove[i].value = '';
      twoSdBelow[i].value = '';
      twoSdAbove[i].value = '';
      oneSdBelow[i].value = '';
      oneSdAbove[i].value = '';
    } else {
      threeSdBelow[i].value = parseFloat(threeSdBelowAdmin.toFixed(5));
      threeSdAbove[i].value = parseFloat(threeSdAboveAdmin.toFixed(5));
      twoSdBelow[i].value = parseFloat(twoSdBelowAdmin.toFixed(5));
      twoSdAbove[i].value = parseFloat(twoSdAboveAdmin.toFixed(5));
      oneSdBelow[i].value = parseFloat(oneSdBelowAdmin.toFixed(5));
      oneSdAbove[i].value = parseFloat(oneSdAboveAdmin.toFixed(5));
    };

  /*CALCULATE PARAMETERS*/

    /*P MINUS MEDIAN, i THROUGH i-7, FOR USE IN RUN CHART'S SHIFT, MIXTURE, AND CLUSTER CALCULATIONS*/
    var pMinusMedianAdmin = parseFloat(p[i].value) - parseFloat(median.value);
    var pMinusMedian1Admin = (function() {
      switch (i) {
        case 0:
          return 0;
          break;
        default:
          return parseFloat(p[i-1].value) - parseFloat(median.value);
      }
    }());
    var pMinusMedian2Admin = (function() {
      switch (i) {
        case 0:
        case 1:
          return 0;
          break;
        default:
          return parseFloat(p[i-2].value) - parseFloat(median.value);
      }
    }());
    var pMinusMedian3Admin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
          return 0;
          break;
        default:
          return parseFloat(p[i-3].value) - parseFloat(median.value);
      }
    }());
    var pMinusMedian4Admin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
          return 0;
          break;
        default:
          return parseFloat(p[i-4].value) - parseFloat(median.value);
      }
    }());
    var pMinusMedian5Admin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          return 0;
          break;
        default:
          return parseFloat(p[i-5].value) - parseFloat(median.value);
      }
    }());
    var pMinusMedian6Admin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          return 0;
          break;
        default:
          return parseFloat(p[i-6].value) - parseFloat(median.value);
      }
    }());

      /*TWO SD BELOW AND ABOVE MEAN, i-1 AND i-2, FOR USE IN CONTROL CHART'S TYPE 1 SHIFT CALCULATION*/
    var twoSdBelow1Admin = (function() {
      switch (i) {
        case 0:
          return 0;
          break;
        default:
          return ((parseFloat(mean.value) - parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value)))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value)))))))) / 2;
      }
    }());
    var twoSdBelow2Admin = (function() {
      switch (i) {
        case 0:
        case 1:
          return 0;
          break;
        default:
          return ((parseFloat(mean.value) - parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value)))))) +
          (Math.abs(parseFloat(mean.value) - parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value)))))))) / 2;
      }
    }());
    var twoSdAbove1Admin = (function() {
      switch (i) {
        case 0:
          return 0;
          break;
        default:
          return 1 - ((((1 - (parseFloat(mean.value) + parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value)))))))) +
          (Math.abs(1 - (parseFloat(mean.value) + parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value))))))))) / 2);
      }
    }());
    var twoSdAbove2Admin = (function() {
      switch (i) {
        case 0:
        case 1:
          return 0;
          break;
        default:
          return 1 - ((((1 - (parseFloat(mean.value) + parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value)))))))) +
          (Math.abs(1 - (parseFloat(mean.value) + parseFloat(2 * ((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value))))))))) / 2);
      }
    }());

      /*ONE SD BELOW AND ABOVE MEAN, i-1 THROUGH i-14, FOR USE IN CONTROL CHART'S
      TYPE 2 SHIFT, MIXTURE, AND STRATIFICATION CALCULATIONS*/
      var oneSdBelow1Admin = (function() {
        switch (i) {
          case 0:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value))))))) / 2;
        }
      }());
      var oneSdBelow2Admin = (function() {
        switch (i) {
          case 0:
          case 1:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value))))))) / 2;
        }
      }());
      var oneSdBelow3Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-3].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-3].value))))))) / 2;
        }
      }());
      var oneSdBelow4Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-4].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-4].value))))))) / 2;
        }
      }());
      var oneSdBelow5Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-5].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-5].value))))))) / 2;
        }
      }());
      var oneSdBelow6Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-6].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-6].value))))))) / 2;
        }
      }());
      var oneSdBelow7Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-7].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-7].value))))))) / 2;
        }
      }());
      var oneSdBelow8Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-8].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-8].value))))))) / 2;
        }
      }());
      var oneSdBelow9Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-9].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-9].value))))))) / 2;
        }
      }());
      var oneSdBelow10Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-10].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-10].value))))))) / 2;
        }
      }());
      var oneSdBelow11Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-11].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-11].value))))))) / 2;
        }
      }());
      var oneSdBelow12Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-12].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-12].value))))))) / 2;
        }
      }());
      var oneSdBelow13Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-13].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-13].value))))))) / 2;
        }
      }());
      var oneSdBelow14Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            return 0;
            break;
          default:
            return ((parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-14].value))))) +
            (Math.abs(parseFloat(mean.value) - parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-14].value))))))) / 2;
        }
      }());
      var oneSdAbove1Admin = (function() {
        switch (i) {
          case 0:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-1].value)))))))) / 2);
        }
      }());
      var oneSdAbove2Admin = (function() {
        switch (i) {
          case 0:
          case 1:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-2].value)))))))) / 2);
        }
      }());
      var oneSdAbove3Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-3].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-3].value)))))))) / 2);
        }
      }());
      var oneSdAbove4Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-4].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-4].value)))))))) / 2);
        }
      }());
      var oneSdAbove5Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-5].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-5].value)))))))) / 2);
        }
      }());
      var oneSdAbove6Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-6].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-6].value)))))))) / 2);
        }
      }());
      var oneSdAbove7Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-7].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-7].value)))))))) / 2);
        }
      }());
      var oneSdAbove8Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-8].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-8].value)))))))) / 2);
        }
      }());
      var oneSdAbove9Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-9].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-9].value)))))))) / 2);
        }
      }());
      var oneSdAbove10Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-10].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-10].value)))))))) / 2);
        }
      }());
      var oneSdAbove11Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-11].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-11].value)))))))) / 2);
        }
      }());
      var oneSdAbove12Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-12].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-12].value)))))))) / 2);
        }
      }());
      var oneSdAbove13Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-13].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-13].value)))))))) / 2);
        }
      }());
      var oneSdAbove14Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            return 0;
            break;
          default:
            return 1 - ((((1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-14].value))))))) +
            (Math.abs(1 - (parseFloat(mean.value) + parseFloat((Math.sqrt((parseFloat(mean.value) * (1 - parseFloat(mean.value))) / parseFloat(denom[i-14].value)))))))) / 2);
        }
      }());

      /*DETERMINE DIRECTION OF FOURTEEN CONSECUTIVE SIGNALS, FOR USE IN OVERCONTROL CALCULATION*/
      var overcontrol1Admin = (function() {
        switch (i) {
          case 0:
            return 0;
            break;
          default:
            return (parseFloat(p[i].value) - parseFloat(p[i-1].value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(p[i-1].value)));
        }
      }());
      var overcontrol2Admin = (function() {
        switch (i) {
          case 0:
          case 1:
            return 0;
            break;
          default:
            return (parseFloat(p[i-1].value) - parseFloat(p[i-2].value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(p[i-2].value)));
        }
      }());
      var overcontrol3Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
            return 0;
            break;
          default:
            return (parseFloat(p[i-2].value) - parseFloat(p[i-3].value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(p[i-3].value)));
        }
      }());
      var overcontrol4Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
            return 0;
            break;
          default:
            return (parseFloat(p[i-3].value) - parseFloat(p[i-4].value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(p[i-4].value)));
        }
      }());
      var overcontrol5Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
            return 0;
            break;
          default:
            return (parseFloat(p[i-4].value) - parseFloat(p[i-5].value)) / (Math.abs(parseFloat(p[i-4].value) - parseFloat(p[i-5].value)));
        }
      }());
      var overcontrol6Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            return 0;
            break;
          default:
            return (parseFloat(p[i-5].value) - parseFloat(p[i-6].value)) / (Math.abs(parseFloat(p[i-5].value) - parseFloat(p[i-6].value)));
        }
      }());
      var overcontrol7Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            return 0;
            break;
          default:
            return (parseFloat(p[i-6].value) - parseFloat(p[i-7].value)) / (Math.abs(parseFloat(p[i-6].value) - parseFloat(p[i-7].value)));
        }
      }());
      var overcontrol8Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            return 0;
            break;
          default:
            return (parseFloat(p[i-7].value) - parseFloat(p[i-8].value)) / (Math.abs(parseFloat(p[i-7].value) - parseFloat(p[i-8].value)));
        }
      }());
      var overcontrol9Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return 0;
            break;
          default:
            return (parseFloat(p[i-8].value) - parseFloat(p[i-9].value)) / (Math.abs(parseFloat(p[i-8].value) - parseFloat(p[i-9].value)));
        }
      }());
      var overcontrol10Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            return 0;
            break;
          default:
            return (parseFloat(p[i-9].value) - parseFloat(p[i-10].value)) / (Math.abs(parseFloat(p[i-9].value) - parseFloat(p[i-10].value)));
        }
      }());
      var overcontrol11Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
            return 0;
            break;
          default:
            return (parseFloat(p[i-10].value) - parseFloat(p[i-11].value)) / (Math.abs(parseFloat(p[i-10].value) - parseFloat(p[i-11].value)));
        }
      }());
      var overcontrol12Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            return 0;
            break;
          default:
            return (parseFloat(p[i-11].value) - parseFloat(p[i-12].value)) / (Math.abs(parseFloat(p[i-11].value) - parseFloat(p[i-12].value)));
        }
      }());
      var overcontrol13Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
            return 0;
            break;
          default:
            return (parseFloat(p[i-12].value) - parseFloat(p[i-13].value)) / (Math.abs(parseFloat(p[i-12].value) - parseFloat(p[i-13].value)));
        }
      }());
      var overcontrol14Admin = (function() {
        switch (i) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            return 0;
            break;
          default:
            return (parseFloat(p[i-13].value) - parseFloat(p[i-14].value)) / (Math.abs(parseFloat(p[i-13].value) - parseFloat(p[i-14].value)));
        }
      }());

      /*P MINUS 3SD, FOR USE IN OUTLIER CALCULATION*/
      var pMinusThreeSdBelowAdmin = parseFloat(p[i].value) - threeSdBelowAdmin;
      var pMinusThreeSdAboveAdmin = parseFloat(p[i].value) - threeSdAboveAdmin;

/*ESTABLISH SIGNALS*/
  /*RUN CHART SIGNALS*/
    /*SIGNAL TREND (FOR RUN CHART): FIVE IN A ROW INCREASING OR DECREASING*/
    var trendRunAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
          return 0;
          break;
        default:
          return ((parseFloat(p[i].value) - parseFloat(p[i-1].value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(p[i-1].value)))) +
            ((parseFloat(p[i-1].value) - parseFloat(p[i-2].value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(p[i-2].value)))) +
            ((parseFloat(p[i-2].value) - parseFloat(p[i-3].value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(p[i-3].value)))) +
            ((parseFloat(p[i-3].value) - parseFloat(p[i-4].value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(p[i-4].value))));
      }
    }());
    if (num[i].value != '' && denom[i].value != '' && trendRunAdmin < -3) {
      warnFiveDecrease[i].style.display = 'block';
    } else {
      warnFiveDecrease[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && trendRunAdmin > 3) {
      warnFiveIncrease[i].style.display = 'block';
    } else {
      warnFiveIncrease[i].style.display = 'none';
    };
    var unaddressedTrendRunRowAdmin = (function() {
      if (num[i].value != '' && denom[i].value != '' && annotation[i].value == '' && (trendRunAdmin < -3 || trendRunAdmin > 3)) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL SHIFT (FOR RUN CHART): >= 6 CONSECTIVE OBSERVATIONS ABOVE OR BELOW MEDIAN*/
      /*CALCULATE SUM OF P SIDEDNESS RELATIVE TO MEDIAN FOR FIVE CONSECUTIVE POINTS,
      EXCLUDING POINTS FOR WHICH P EQUALS MEDIAN*/
    var sumSideMedianAdmin = (function() {
      switch (i) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        return 0;
        break;
      default:
        if (pMinusMedianAdmin == 0) {
          return 0;
        } else if (pMinusMedian1Admin == 0) {
          return ((parseFloat(p[i].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-2].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-3].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-4].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-4].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-5].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-5].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-6].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-6].value) - parseFloat(median.value))));
        } else if (pMinusMedian2Admin == 0) {
          return ((parseFloat(p[i].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-1].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-3].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-4].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-4].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-5].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-5].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-6].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-6].value) - parseFloat(median.value))));
        } else if (pMinusMedian3Admin == 0) {
          return ((parseFloat(p[i].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-1].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-2].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-4].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-4].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-5].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-5].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-6].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-6].value) - parseFloat(median.value))));
        } else if (pMinusMedian4Admin == 0) {
          return ((parseFloat(p[i].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-1].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-2].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-3].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-5].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-5].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-6].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-6].value) - parseFloat(median.value))));
        } else if (pMinusMedian5Admin == 0) {
          return ((parseFloat(p[i].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-1].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-2].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-3].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-4].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-4].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-6].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-6].value) - parseFloat(median.value))));
        } else {
          return ((parseFloat(p[i].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-1].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-2].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-3].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-4].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-4].value) - parseFloat(median.value)))) +
          ((parseFloat(p[i-5].value) - parseFloat(median.value)) / (Math.abs(parseFloat(p[i-5].value) - parseFloat(median.value))));
        }
      }
    }());
      /*GENERATE SHIFT SIGNAL FOR RUN CHART*/
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 9 && sumSideMedianAdmin < -5) {
      warnSixBelowMedian[i].style.display = 'block';
    } else {
      warnSixBelowMedian[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 9 && sumSideMedianAdmin > 5) {
      warnSixAboveMedian[i].style.display = 'block';
    } else {
      warnSixAboveMedian[i].style.display = 'none';
    };
    var unaddressedShiftRunRowAdmin = (function() {
      if ((num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 9 && annotation[i].value == '') && (sumSideMedianAdmin < -5 || sumSideMedianAdmin > 5)) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL CLUSTER/MIXTURE (FOR RUN CHART): IF NUMBER OF RUNS IS LESS THAN
    LOWER LIMIT OR GREATER THAN UPPER LIMIT FOR NUMBER OF OBSERVATIONS*/
      /*CALCULATE UPPER AND LOWER RUN LIMITS*/
    var runTestLowerLimitAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          return 0;
          break;
        case 9:
          return 3;
          break;
        case 10:
          return 3;
          break;
        case 11:
          return 3;
          break;
        case 12:
          return 4;
          break;
        case 13:
          return 4;
          break;
        case 14:
          return 5;
          break;
        case 15:
          return 5;
          break;
        case 16:
          return 5;
          break;
        case 17:
          return 6;
          break;
        case 18:
          return 6;
          break;
        case 19:
          return 6;
          break;
        case 20:
          return 7;
          break;
        case 21:
          return 7;
          break;
        case 22:
          return 7;
          break;
        case 23:
          return 8;
          break;
        case 24:
          return 8;
          break;
        case 25:
          return 9;
          break;
        case 26:
          return 10;
          break;
        case 27:
          return 10;
          break;
        case 28:
          return 10;
          break;
        case 29:
          return 11;
          break;
        case 30:
          return 11;
          break;
        case 31:
          return 11;
          break;
        case 32:
          return 12;
          break;
        case 33:
          return 12;
          break;
        case 34:
          return 12;
          break;
        case 35:
          return 13;
          break;
        case 36:
          return 13;
          break;
        case 37:
          return 14;
          break;
        case 38:
          return 14;
          break;
        case 39:
          return 15;
          break;
        case 40:
          return 15;
          break;
        case 41:
          return 16;
          break;
        case 42:
          return 16;
          break;
        case 43:
          return 17;
          break;
        case 44:
          return 17;
          break;
        case 45:
          return 17;
          break;
        case 46:
          return 18;
          break;
        case 47:
          return 18;
          break;
        case 48:
          return 19;
          break;
        case 49:
          return 19;
          break;
        case 50:
          return 20;
          break;
        case 51:
          return 20;
          break;
        case 52:
          return 21;
          break;
        case 53:
          return 21;
          break;
        case 54:
          return 22;
          break;
        case 55:
          return 22;
          break;
        case 56:
          return 23;
          break;
        case 57:
          return 23;
          break;
        case 58:
          return 24;
          break;
        default:
          return 24;
      }
    }());
    var runTestUpperLimitAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          return 100;
          break;
        case 9:
          return 9;
          break;
        case 10:
          return 10;
          break;
        case 11:
          return 11;
          break;
        case 12:
          return 11;
          break;
        case 13:
          return 12;
          break;
        case 14:
          return 12;
          break;
        case 15:
          return 13;
          break;
        case 16:
          return 13;
          break;
        case 17:
          return 14;
          break;
        case 18:
          return 15;
          break;
        case 19:
          return 16;
          break;
        case 20:
          return 16;
          break;
        case 21:
          return 17;
          break;
        case 22:
          return 17;
          break;
        case 23:
          return 18;
          break;
        case 24:
          return 18;
          break;
        case 25:
          return 19;
          break;
        case 26:
          return 19;
          break;
        case 27:
          return 20;
          break;
        case 28:
          return 20;
          break;
        case 29:
          return 21;
          break;
        case 30:
          return 22;
          break;
        case 31:
          return 23;
          break;
        case 32:
          return 23;
          break;
        case 33:
          return 24;
          break;
        case 34:
          return 24;
          break;
        case 35:
          return 25;
          break;
        case 36:
          return 25;
          break;
        case 37:
          return 26;
          break;
        case 38:
          return 26;
          break;
        case 39:
          return 27;
          break;
        case 40:
          return 27;
          break;
        case 41:
          return 28;
          break;
        case 42:
          return 28;
          break;
        case 43:
          return 29;
          break;
        case 44:
          return 30;
          break;
        case 45:
          return 31;
          break;
        case 46:
          return 31;
          break;
        case 47:
          return 32;
          break;
        case 48:
          return 32;
          break;
        case 49:
          return 33;
          break;
        case 50:
          return 33;
          break;
        case 51:
          return 34;
          break;
        case 52:
          return 34;
          break;
        case 53:
          return 35;
          break;
        case 54:
          return 35;
          break;
        case 55:
          return 35;
          break;
        case 56:
          return 36;
          break;
        case 57:
          return 37;
          break;
        case 58:
          return 38;
          break;
        default:
          return 38;
      }
    }());
      /*SIGNAL CLUSTER/MIXTURE (FOR RUN CHART): IF NUMBER OF RUNS IS LESS THAN
      LOWER LIMIT OR GREATER THAN UPPER LIMIT FOR NUMBER OF OBSERVATIONS*/
    var crossMedianAdmin = (function() {
      switch (i) {
        case 0:
          return 0;
          break;
        case 1:
          if (pMinusMedianAdmin == 0 || pMinusMedian1Admin == 0) {
            return 0;
          } else {
            return ((Math.abs((pMinusMedianAdmin / (Math.abs(pMinusMedianAdmin))) - (pMinusMedian1Admin / (Math.abs(pMinusMedian1Admin))))) / 2);
          };
          break;
        default:
          if (pMinusMedianAdmin == 0) {
            return 0;
          } else if (pMinusMedian1Admin == 0) {
            return (Math.abs((pMinusMedianAdmin / (Math.abs(pMinusMedianAdmin))) - (pMinusMedian2Admin / (Math.abs(pMinusMedian2Admin))))) / 2;
          } else {
            return (Math.abs((pMinusMedianAdmin / (Math.abs(pMinusMedianAdmin))) - (pMinusMedian1Admin / (Math.abs(pMinusMedian1Admin))))) / 2;
          };
      }
    }());
    sumCrossMedianAdmin = sumCrossMedianAdmin + crossMedianAdmin;
    runsAdmin = sumCrossMedianAdmin + 1;
    runsMinusLowerLimitAdmin = runsAdmin - runTestLowerLimitAdmin;
    runsMinusUpperLimitAdmin = runsAdmin - runTestUpperLimitAdmin;
    if (num[i].value != '' && denom[i].value != '' && runsMinusLowerLimitAdmin < 0) {
      warnClusteringRun[i].style.display = 'block';
    } else {
      warnClusteringRun[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && runsMinusUpperLimitAdmin > 0) {
      warnMixtureRun[i].style.display = 'block';
    } else {
      warnMixtureRun[i].style.display = 'none';
    };
    var unaddressedMixtureClusterRunRowAdmin = (function() {
      if (num[i].value != '' && denom[i].value != '' && annotation[i].value == '' && (runsMinusLowerLimitAdmin < 0 || runsMinusUpperLimitAdmin > 0)) {
        return 1;
      } else {
        return 0;
      }
    }());

  /*CONTROL CHART SIGNALS*/
    /*SIGNAL TREND (FOR CONTROL CHART): SIX IN A ROW INCREASING OR DECREASING*/
    var trendControlAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          return 0;
          break;
        default:
          return ((parseFloat(p[i].value) - parseFloat(p[i-1].value)) / (Math.abs(parseFloat(p[i].value) - parseFloat(p[i-1].value)))) +
          ((parseFloat(p[i-1].value) - parseFloat(p[i-2].value)) / (Math.abs(parseFloat(p[i-1].value) - parseFloat(p[i-2].value)))) +
          ((parseFloat(p[i-2].value) - parseFloat(p[i-3].value)) / (Math.abs(parseFloat(p[i-2].value) - parseFloat(p[i-3].value)))) +
          ((parseFloat(p[i-3].value) - parseFloat(p[i-4].value)) / (Math.abs(parseFloat(p[i-3].value) - parseFloat(p[i-4].value)))) +
          ((parseFloat(p[i-4].value) - parseFloat(p[i-5].value)) / (Math.abs(parseFloat(p[i-4].value) - parseFloat(p[i-5].value))));
      }
    }());
    if (num[i].value != '' && denom[i].value != '' && trendControlAdmin < -4) {
      warnSixDecrease[i].style.display = 'block';
    } else {
      warnSixDecrease[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && trendControlAdmin > 4) {
      warnSixIncrease[i].style.display = 'block';
    } else {
      warnSixIncrease[i].style.display = 'none';
    };
    var unaddressedTrendRowAdmin = (function() {
      if (num[i].value != '' && denom[i].value != '' && annotation[i].value == '' && (trendControlAdmin < -4 || trendControlAdmin > 4)) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL TYPE 1 SHIFT: >= TWO OUT OF THREE CONSECUTIVE POINTS > 2 SD FROM MEAN*/
    var sumTwoSdBelowAdmin = (function() {
      switch (i) {
        case 0:
          return 0;
          break;
        case 1:
        return ((parseFloat(p[i].value) - twoSdBelowAdmin) / (Math.abs(parseFloat(p[i].value) - twoSdBelowAdmin))) +
            ((parseFloat(p[i-1].value) - twoSdBelow1Admin) / (Math.abs(parseFloat(p[i-1].value) - twoSdBelow1Admin)));
          break;
        default:
          return ((parseFloat(p[i].value) - twoSdBelowAdmin) / (Math.abs(parseFloat(p[i].value) - twoSdBelowAdmin))) +
          ((parseFloat(p[i-1].value) - twoSdBelow1Admin) / (Math.abs(parseFloat(p[i-1].value) - twoSdBelow1Admin))) +
          ((parseFloat(p[i-2].value) - twoSdBelow2Admin) / (Math.abs(parseFloat(p[i-2].value) - twoSdBelow2Admin)));
      }
    }());
    var sumTwoSdAboveAdmin = (function() {
      switch (i) {
        case 0:
          return 0;
          break;
        case 1:
        return ((parseFloat(p[i].value) - twoSdAboveAdmin) / (Math.abs(parseFloat(p[i].value) - twoSdAboveAdmin))) +
            ((parseFloat(p[i-1].value) - twoSdAbove1Admin) / (Math.abs(parseFloat(p[i-1].value) - twoSdAbove1Admin)));
          break;
        default:
          return ((parseFloat(p[i].value) - twoSdAboveAdmin) / (Math.abs(parseFloat(p[i].value) - twoSdAboveAdmin))) +
          ((parseFloat(p[i-1].value) - twoSdAbove1Admin) / (Math.abs(parseFloat(p[i-1].value) - twoSdAbove1Admin))) +
          ((parseFloat(p[i-2].value) - twoSdAbove2Admin) / (Math.abs(parseFloat(p[i-2].value) - twoSdAbove2Admin)));
      }
    }());
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && sumTwoSdBelowAdmin < 0) {
      warnTwoThirdsBelowTwoSD[i].style.display = 'block';
    } else {
      warnTwoThirdsBelowTwoSD[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && sumTwoSdAboveAdmin > 0) {
      warnTwoThirdsAboveTwoSD[i].style.display = 'block';
    } else {
      warnTwoThirdsAboveTwoSD[i].style.display = 'none';
    };
    var unaddressedShiftOneRowAdmin = (function() {
      if ((num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && annotation[i].value == '') && (sumTwoSdBelowAdmin < 0 || sumTwoSdAboveAdmin > 0)) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL TYPE 2 SHIFT: >= FOUR OUT OF FIVE CONSECUTIVE POINTS > 1 SD FROM MEAN*/
    var sumOneSdBelowAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
          return 0;
          break;
        case 3:
          return ((parseFloat(p[i].value) - oneSdBelowAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdBelowAdmin))) +
          ((parseFloat(p[i-1].value) - oneSdBelow1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdBelow1Admin))) +
          ((parseFloat(p[i-2].value) - oneSdBelow2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdBelow2Admin))) +
          ((parseFloat(p[i-3].value) - oneSdBelow3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdBelow3Admin)));
          break;
        default:
        return ((parseFloat(p[i].value) - oneSdBelowAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdBelowAdmin))) +
        ((parseFloat(p[i-1].value) - oneSdBelow1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdBelow1Admin))) +
        ((parseFloat(p[i-2].value) - oneSdBelow2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdBelow2Admin))) +
        ((parseFloat(p[i-3].value) - oneSdBelow3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdBelow3Admin))) +
        ((parseFloat(p[i-4].value) - oneSdBelow4Admin) / (Math.abs(parseFloat(p[i-4].value) - oneSdBelow4Admin)));
      }
    }());
    var sumOneSdAboveAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
          return 0;
          break;
        case 3:
          return ((parseFloat(p[i].value) - oneSdAboveAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdAboveAdmin))) +
          ((parseFloat(p[i-1].value) - oneSdAbove1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdAbove1Admin))) +
          ((parseFloat(p[i-2].value) - oneSdAbove2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdAbove2Admin))) +
          ((parseFloat(p[i-3].value) - oneSdAbove3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdAbove3Admin)));
          break;
        default:
        return ((parseFloat(p[i].value) - oneSdAboveAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdAboveAdmin))) +
        ((parseFloat(p[i-1].value) - oneSdAbove1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdAbove1Admin))) +
        ((parseFloat(p[i-2].value) - oneSdAbove2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdAbove2Admin))) +
        ((parseFloat(p[i-3].value) - oneSdAbove3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdAbove3Admin)));
        ((parseFloat(p[i-4].value) - oneSdAbove4Admin) / (Math.abs(parseFloat(p[i-4].value) - oneSdAbove4Admin)));
      }
    }());
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && sumOneSdBelowAdmin < -2) {
      warnFourFifthsBelowOneSD[i].style.display = 'block';
    } else {
      warnFourFifthsBelowOneSD[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && sumOneSdAboveAdmin > 2) {
      warnFourFifthsAboveOneSD[i].style.display = 'block';
    } else {
      warnFourFifthsAboveOneSD[i].style.display = 'none';
    };
    var unaddressedShiftTwoRowAdmin = (function() {
      if ((num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && annotation[i].value == '') && (sumOneSdBelowAdmin < -2 || sumOneSdAboveAdmin > 2)) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL TYPE 3 SHIFT: >= EIGHT CONSECUTIVE POINTS ON ONE SIDE OF MEAN*/
    var sumSideMeanAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          return 0;
          break;
        default:
          return parseFloat(((p[i].value - mean.value) / (Math.abs(p[i].value - mean.value)))) +
          parseFloat(((p[i-1].value - mean.value) / (Math.abs(p[i-1].value - mean.value)))) +
          parseFloat(((p[i-2].value - mean.value) / (Math.abs(p[i-2].value - mean.value)))) +
          parseFloat(((p[i-3].value - mean.value) / (Math.abs(p[i-3].value - mean.value)))) +
          parseFloat(((p[i-4].value - mean.value) / (Math.abs(p[i-4].value - mean.value)))) +
          parseFloat(((p[i-5].value - mean.value) / (Math.abs(p[i-5].value - mean.value)))) +
          parseFloat(((p[i-6].value - mean.value) / (Math.abs(p[i-6].value - mean.value)))) +
          parseFloat(((p[i-7].value - mean.value) / (Math.abs(p[i-7].value - mean.value))));
      }
    }());
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && sumSideMeanAdmin < -7) {
      warnEightBelowMean[i].style.display = 'block';
    } else {
      warnEightBelowMean[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && sumSideMeanAdmin > 7) {
      warnEightAboveMean[i].style.display = 'block';
    } else {
      warnEightAboveMean[i].style.display = 'none';
    };
    var unaddressedShiftThreeRowAdmin = (function() {
      if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && annotation[i].value == '' && sumSideMeanAdmin < -7) {
        return 1;
      } else if (nodeLengthAdmin > 19 && annotation[i].value == '' && sumSideMeanAdmin > 7) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL MIXTURE: >= EIGHT CONSECUTIVE POINTS > 1 SD FROM MEAN*/
    var mixtureAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          return -3;
          break;
        default:
          return (((parseFloat(p[i].value) - oneSdAboveAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdAboveAdmin))) -
              ((parseFloat(p[i].value) - oneSdBelowAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdBelowAdmin)))) +
              (((parseFloat(p[i-1].value) - oneSdAbove1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdAbove1Admin))) -
              ((parseFloat(p[i-1].value) - oneSdBelow1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdBelow1Admin)))) +
              (((parseFloat(p[i-2].value) - oneSdAbove2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdAbove2Admin))) -
              ((parseFloat(p[i-2].value) - oneSdBelow2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdBelow2Admin)))) +
              (((parseFloat(p[i-3].value) - oneSdAbove3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdAbove3Admin))) -
              ((parseFloat(p[i-3].value) - oneSdBelow3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdBelow3Admin)))) +
              (((parseFloat(p[i-4].value) - oneSdAbove4Admin) / (Math.abs(parseFloat(p[i-4].value) - oneSdAbove4Admin))) -
              ((parseFloat(p[i-4].value) - oneSdBelow4Admin) / (Math.abs(parseFloat(p[i-4].value) - oneSdBelow4Admin)))) +
              (((parseFloat(p[i-5].value) - oneSdAbove5Admin) / (Math.abs(parseFloat(p[i-5].value) - oneSdAbove5Admin))) -
              ((parseFloat(p[i-5].value) - oneSdBelow5Admin) / (Math.abs(parseFloat(p[i-5].value) - oneSdBelow5Admin)))) +
              (((parseFloat(p[i-6].value) - oneSdAbove6Admin) / (Math.abs(parseFloat(p[i-6].value) - oneSdAbove6Admin))) -
              ((parseFloat(p[i-6].value) - oneSdBelow6Admin) / (Math.abs(parseFloat(p[i-6].value) - oneSdBelow6Admin)))) +
              (((parseFloat(p[i-7].value) - oneSdAbove7Admin) / (Math.abs(parseFloat(p[i-7].value) - oneSdAbove7Admin))) -
              ((parseFloat(p[i-7].value) - oneSdBelow7Admin) / (Math.abs(parseFloat(p[i-7].value) - oneSdBelow7Admin))));
      }
    }());
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && mixtureAdmin > -2) {
      warnMixture[i].style.display = 'block';
    } else {
      warnMixture[i].style.display = 'none';
    };
    var unaddressedMixtureRowAdmin = (function() {
      if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && annotation[i].value == '' && mixtureAdmin > -2) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL STRATIFICATION: >= 15 CONSECUTIVE POINTS < 1 SD FROM MEAN*/
    var stratificationAdmin = (function() {
      switch (i) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          return 1;
          break;
        default:
          return (((parseFloat(p[i].value) - oneSdAboveAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdAboveAdmin))) -
            ((parseFloat(p[i].value) - oneSdBelowAdmin) / (Math.abs(parseFloat(p[i].value) - oneSdBelowAdmin)))) +
            (((parseFloat(p[i-1].value) - oneSdAbove1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdAbove1Admin))) -
            ((parseFloat(p[i-1].value) - oneSdBelow1Admin) / (Math.abs(parseFloat(p[i-1].value) - oneSdBelow1Admin)))) +
            (((parseFloat(p[i-2].value) - oneSdAbove2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdAbove2Admin))) -
            ((parseFloat(p[i-2].value) - oneSdBelow2Admin) / (Math.abs(parseFloat(p[i-2].value) - oneSdBelow2Admin)))) +
            (((parseFloat(p[i-3].value) - oneSdAbove3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdAbove3Admin))) -
            ((parseFloat(p[i-3].value) - oneSdBelow3Admin) / (Math.abs(parseFloat(p[i-3].value) - oneSdBelow3Admin)))) +
            (((parseFloat(p[i-4].value) - oneSdAbove4Admin) / (Math.abs(parseFloat(p[i-4].value) - oneSdAbove4Admin))) -
            ((parseFloat(p[i-4].value) - oneSdBelow4Admin) / (Math.abs(parseFloat(p[i-4].value) - oneSdBelow4Admin)))) +
            (((parseFloat(p[i-5].value) - oneSdAbove5Admin) / (Math.abs(parseFloat(p[i-5].value) - oneSdAbove5Admin))) -
            ((parseFloat(p[i-5].value) - oneSdBelow5Admin) / (Math.abs(parseFloat(p[i-5].value) - oneSdBelow5Admin)))) +
            (((parseFloat(p[i-6].value) - oneSdAbove6Admin) / (Math.abs(parseFloat(p[i-6].value) - oneSdAbove6Admin))) -
            ((parseFloat(p[i-6].value) - oneSdBelow6Admin) / (Math.abs(parseFloat(p[i-6].value) - oneSdBelow6Admin)))) +
            (((parseFloat(p[i-7].value) - oneSdAbove7Admin) / (Math.abs(parseFloat(p[i-7].value) - oneSdAbove7Admin))) -
            ((parseFloat(p[i-7].value) - oneSdBelow7Admin) / (Math.abs(parseFloat(p[i-7].value) - oneSdBelow7Admin)))) +
            (((parseFloat(p[i-8].value) - oneSdAbove8Admin) / (Math.abs(parseFloat(p[i-8].value) - oneSdAbove8Admin))) -
            ((parseFloat(p[i-8].value) - oneSdBelow8Admin) / (Math.abs(parseFloat(p[i-8].value) - oneSdBelow8Admin)))) +
            (((parseFloat(p[i-9].value) - oneSdAbove9Admin) / (Math.abs(parseFloat(p[i-9].value) - oneSdAbove9Admin))) -
            ((parseFloat(p[i-9].value) - oneSdBelow9Admin) / (Math.abs(parseFloat(p[i-9].value) - oneSdBelow9Admin)))) +
            (((parseFloat(p[i-10].value) - oneSdAbove10Admin) / (Math.abs(parseFloat(p[i-10].value) - oneSdAbove10Admin))) -
            ((parseFloat(p[i-10].value) - oneSdBelow10Admin) / (Math.abs(parseFloat(p[i-10].value) - oneSdBelow10Admin)))) +
            (((parseFloat(p[i-11].value) - oneSdAbove11Admin) / (Math.abs(parseFloat(p[i-11].value) - oneSdAbove11Admin))) -
            ((parseFloat(p[i-11].value) - oneSdBelow11Admin) / (Math.abs(parseFloat(p[i-11].value) - oneSdBelow11Admin)))) +
            (((parseFloat(p[i-12].value) - oneSdAbove12Admin) / (Math.abs(parseFloat(p[i-12].value) - oneSdAbove12Admin))) -
            ((parseFloat(p[i-12].value) - oneSdBelow12Admin) / (Math.abs(parseFloat(p[i-12].value) - oneSdBelow12Admin)))) +
            (((parseFloat(p[i-13].value) - oneSdAbove13Admin) / (Math.abs(parseFloat(p[i-13].value) - oneSdAbove13Admin))) -
            ((parseFloat(p[i-13].value) - oneSdBelow13Admin) / (Math.abs(parseFloat(p[i-13].value) - oneSdBelow13Admin)))) +
            (((parseFloat(p[i-14].value) - oneSdAbove14Admin) / (Math.abs(parseFloat(p[i-14].value) - oneSdAbove14Admin))) -
            ((parseFloat(p[i-14].value) - oneSdBelow14Admin) / (Math.abs(parseFloat(p[i-14].value) - oneSdBelow14Admin))));
      }
    }());
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && stratificationAdmin < -28) {
      warnStratification[i].style.display = 'block';
    } else {
      warnStratification[i].style.display = 'none';
    };
    var unaddressedStratificationRowAdmin = (function() {
      if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && annotation[i].value == '' && stratificationAdmin < -28) {
        return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL OVERCONTROL: >= FOURTEEN CONSECTIVE POINTS ALTERNATING UP AND DOWN*/
    if (num[i].value != '' && denom[i].value != '' &&
      overcontrol1Admin < 0 &&
      overcontrol2Admin > 0 &&
      overcontrol3Admin < 0 &&
      overcontrol4Admin > 0 &&
      overcontrol5Admin < 0 &&
      overcontrol6Admin > 0 &&
      overcontrol7Admin < 0 &&
      overcontrol8Admin > 0 &&
      overcontrol9Admin < 0 &&
      overcontrol10Admin > 0 &&
      overcontrol11Admin < 0 &&
      overcontrol12Admin > 0 &&
      overcontrol13Admin < 0 &&
      overcontrol14Admin > 0) {
        warnOvercontrol[i].style.display = 'block';
    } else if (num[i].value != '' && denom[i].value != '' &&
      overcontrol1Admin > 0 &&
      overcontrol2Admin < 0 &&
      overcontrol3Admin > 0 &&
      overcontrol4Admin < 0 &&
      overcontrol5Admin > 0 &&
      overcontrol6Admin < 0 &&
      overcontrol7Admin > 0 &&
      overcontrol8Admin < 0 &&
      overcontrol9Admin > 0 &&
      overcontrol10Admin < 0 &&
      overcontrol11Admin > 0 &&
      overcontrol12Admin < 0 &&
      overcontrol13Admin > 0 &&
      overcontrol14Admin < 0) {
        warnOvercontrol[i].style.display = 'block';
    } else {
      warnOvercontrol[i].style.display = 'none';
    };
    var unaddressedOvercontrolRowAdmin = (function() {
      if (num[i].value != '' && denom[i].value != '' && annotation[i].value == '' &&
        (overcontrol1Admin < 0 &&
        overcontrol2Admin > 0 &&
        overcontrol3Admin < 0 &&
        overcontrol4Admin > 0 &&
        overcontrol5Admin < 0 &&
        overcontrol6Admin > 0 &&
        overcontrol7Admin < 0 &&
        overcontrol8Admin > 0 &&
        overcontrol9Admin < 0 &&
        overcontrol10Admin > 0 &&
        overcontrol11Admin < 0 &&
        overcontrol12Admin > 0 &&
        overcontrol13Admin < 0 &&
        overcontrol14Admin > 0) ||
        (overcontrol1Admin > 0 &&
        overcontrol2Admin < 0 &&
        overcontrol3Admin > 0 &&
        overcontrol4Admin < 0 &&
        overcontrol5Admin > 0 &&
        overcontrol6Admin < 0 &&
        overcontrol7Admin > 0 &&
        overcontrol8Admin < 0 &&
        overcontrol9Admin > 0 &&
        overcontrol10Admin < 0 &&
        overcontrol11Admin > 0 &&
        overcontrol12Admin < 0 &&
        overcontrol13Admin > 0 &&
        overcontrol14Admin < 0)) {
          return 1;
      } else {
        return 0;
      }
    }());

    /*SIGNAL OUTLIER: P > 3 SD FROM MEAN*/
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && pMinusThreeSdBelowAdmin < 0) {
      warnOutlierBelow[i].style.display = 'block';
    } else {
      warnOutlierBelow[i].style.display = 'none';
    };
    if (num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && pMinusThreeSdAboveAdmin > 0) {
      warnOutlierAbove[i].style.display = 'block';
    } else {
      warnOutlierAbove[i].style.display = 'none';
    };

/*UNADDRESSED SIGNAL COUNTERS*/
  /*UNADDRESSED OUTLIER COUNTER*/
    var unaddressedOutlierRowAdmin = (function() {
      if ((num[i].value != '' && denom[i].value != '' && nodeLengthAdmin > 19 && annotation[i].value == '') && (pMinusThreeSdBelowAdmin < 0 || pMinusThreeSdAboveAdmin > 0)) {
        return 1;
      } else {
        return 0;
      }
    }());
    unaddressedOutlierTotalAdmin = unaddressedOutlierTotalAdmin + unaddressedOutlierRowAdmin;
    unaddressedOutlierTotalOutside.value = unaddressedOutlierTotalAdmin;

  /*UNADDRESSED PATTERN COUNTER*/
    var unaddressedPatternRowAdmin = unaddressedTrendRunRowAdmin +
      unaddressedShiftRunRowAdmin +
      unaddressedMixtureClusterRunRowAdmin +
      unaddressedTrendRunRowAdmin +
      unaddressedShiftOneRowAdmin +
      unaddressedShiftTwoRowAdmin + unaddressedShiftThreeRowAdmin +
      unaddressedMixtureRowAdmin +
      unaddressedStratificationRowAdmin +
      unaddressedOvercontrolRowAdmin;
    unaddressedPatternTotalAdmin = unaddressedPatternTotalAdmin + unaddressedPatternRowAdmin;
    unaddressedPatternTotalOutside.value = unaddressedPatternTotalAdmin;
  }
};
</script>
